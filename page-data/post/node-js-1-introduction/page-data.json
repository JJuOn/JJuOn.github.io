{"componentChunkName":"component---src-templates-blog-template-js","path":"/post/node-js-1-introduction","result":{"data":{"markdownRemark":{"html":"<h2>1. Introduction</h2>\n<h3>(1) Node.js 란?</h3>\n<p>Node.js는 구글의 V8 엔진을 인터프리터로 사용하는 런타임입니다.</p>\n<p>웹 프론트엔드에서만 사용되던 JavaScript를 브라우저 외의 다른 환경에서도 사용할 수 있게 된 것입니다.</p>\n<h4>Node.js의 장단점</h4>\n<p>장점이라 할 수 있는 점은 크게 세가지가 있습니다.<br>\n첫번째로는 Javascript를 기반으로 하고 있기 때문에, 웹 프론트엔드에서 Javascript를 다뤄 보았다면 쉽게 익힐 수 있습니다.  </p>\n<p>두번째로는 상당량의 모듈을 갖고 있기 때문에, 개발자가 이용하고자 하는 대부분의 모듈을 쉽게 구할 수 있습니다.\n<img src=\"https://github.com/JJuOn/2019-Node.js-Study/blob/master/img/1.PNG?raw=true\"><br>\n위 이미지는 2019년 7월 기준, www.modulecounts.com 에서 모듈의 개수를 비교한 그래프입니다.<br>\nNode.js에 해당하는 npm(node.js package manager)가 압도적 차이로 1위를 한것을 알 수 있습니다.  </p>\n<p>세번째로는 비동기(Asynchronous)입니다.<br>\n프로그램이 순차적으로 시작되는 것이 아닌 이벤트 기반으로 실행되기 때문에 매우 빠르고 효율적으로 작동합니다.</p>\n<p>다음엔 단점을 살펴보겠습니다.<br>\n첫번째로는 비동기(Asynchronous)입니다.\n장점에서 언급되었던 그 비동기와 같습니다.<br>\n순차적 프로그래밍 언어(Python, C, C++, Java 등)에 익숙한 우리에게 비동기는 초반에 큰 혼란을 줍니다.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> file<span class=\"token operator\">=</span><span class=\"token string\">\"example.txt\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> fs<span class=\"token operator\">=</span><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nfs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span>file<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span>data</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">throw</span> err<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">let</span> len<span class=\"token operator\">=</span>data<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> \n    console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"File Length: \"</span><span class=\"token operator\">+</span>len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//1</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Exit\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//2</span></code></pre></div>\n<p>위 소스코드는 파일을 읽고 출력하는 부분과, \"Exit\"라고 출력하는 부분으로 나누어져있습니다.<br>\n오늘은 처음이시기 때문에 소스코드 전체를 이해하려 하지 않으셔도 됩니다.<br>\n1번과 2번의 console.log()는 콘솔창에 출력하는 함수입니다.<br>\n1번과 2번 중 어느것이 먼저 실행될것이라 생각하시나요?<br>\n1번이라 대답하셨다면 순차적 프로그래밍에 이미 익숙해지신 것입니다.<br>\n정답은 2번이 출력된 후, 1번이 출력됩니다.  </p>\n<p>처음 접하신 분이라면 큰 혼란을 느끼셨을 것입니다.<br>\n실제로 Node.js를 배우면서 많은 어려움을 느끼는 것이 이 부분입니다.  </p>\n<p>두번째로, 위 소스코드에서 파일 3개를 순차적으로 읽어야 한다면 어떻게 될까요?  </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> file1<span class=\"token operator\">=</span><span class=\"token string\">\"1.txt\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> file2<span class=\"token operator\">=</span><span class=\"token string\">\"2.txt\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> file3<span class=\"token operator\">=</span><span class=\"token string\">\"3.txt\"</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">const</span> fs<span class=\"token operator\">=</span><span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'fs'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nfs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span>file1<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span>data1</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">{</span>\n    fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFIle</span><span class=\"token punctuation\">(</span>file2<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span>data2</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">{</span>\n        fs<span class=\"token punctuation\">.</span><span class=\"token function\">readFile</span><span class=\"token punctuation\">(</span>file3<span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">err<span class=\"token punctuation\">,</span>data3</span><span class=\"token punctuation\">)</span><span class=\"token operator\">=></span><span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">let</span> len1<span class=\"token operator\">=</span>data1<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">let</span> len2<span class=\"token operator\">=</span>data2<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> \n            <span class=\"token keyword\">let</span> len3<span class=\"token operator\">=</span>data3<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>length<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'File lengths:,len1,len2,len3'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>대충 이런 식으로 됩니다.<br>\n소스코드가 복잡해진 것을 느낄수 있습니다.<br>\n지금은 3개이지만, 만약 이런 과정이 더 반복된다면 소스코드는 더욱 복잡해 질것입니다.<br>\n복잡해진 소스코드는 에러가 자주 발생할 뿐만 아니라, 발생한 에러도 찾기 힘들어 질 것입니다.<br>\n또한 소스코드를 수정하다가 중괄호{}나 소괄호()를 빼먹는다면?<br>\n프로그래밍을 하려 했는데 괄호 짝 맞추기나 하고 있는 여러분을 찾을 수 있을것입니다.<br>\n이런 상황을 Callback Hell이라고 합니다. fs.readFile() 뒷부분의 (err,data)에 해당하는 call back 함수의 지옥에 갇혀버린 것이죠.  </p>\n<p>다행히 Node.js를 사용하는 많은 개발자들도 이러한 불편함을 알고 있기에 이를 해결할 다양한 방법이 존재합니다.<br>\n이런 방법들은 추후에 다룰 예정입니다.  </p>\n<h3>(2) 개발환경 구축하기 - Node.js 설치</h3>\n<p>이번에는 Node.js를 설치해보도록 하겠습니다.<br>\nwww.nodejs.org<br>\nNode.js 공식사이트입니다.<br>\n들어가자 마자 보면 다운로드부터 하라고 하네요.<br>\nLTS 버전과, Current 버전이 있습니다.<br>\nLTS 버전은 안정된 버전이라고 보시면 되고, Current 버전은 최신 버전이라고 생각하시면 됩니다.<br>\nLTS 버전을 선택해 설치해주시면 됩니다.  </p>\n<p>설치가 완료되었다면 cmd창에서  </p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">node -v</code></pre></div>\n<p>를 입력했을 때, 설치한 Node.js의 버전이 출력된다면 성공적으로 설치가 된것입니다.</p>\n<h3>(3) 개발환경 구축하기 - IDE 설치</h3>\n<p>IDE란 통합 개발 환경(Integrated Development Environment)으로 코딩, 디버그, 컴파일, 배포 등 프로그램 개발에 관련된 모든 작업을 하나의 프로그램 안에서 처리하는 환경을 제공하는 소프트웨어입니다.<br>\nNode.js 개발자들이 주로 사용하는 IDE에서는 Visual Studio Code와 Webstorm, Atom 등이 있습니다.<br>\n저는 이전에 Pycharm을 사용하였기에 Webstorm을 주로 사용하지만, Visual Studio Code도 매우 많은 사람들이 이용하는 IDE입니다.<br>\n본 강의는 Webstorm과 Visual Studio Code를 기반으로 작성되었습니다.  </p>\n<h4>Webstrom 설치하기</h4>\n<p>Jetbrains 사의 Webstorm은 자사의 pycharm(python), intellij IDEA(java)와 다르게 유료입니다.<br>\n하지만 우린 학생이기 때문에 학생 라이센스를 통해 교육용으로 사용할 수 있습니다.<br>\n다음 링크에 나와있는 방법을 통해 라이센스를 받아봅시다.<br>\n<a href=\"https://tworab.tistory.com/47\">https://tworab.tistory.com/47</a>  </p>\n<p>학생용 라이센스를 얻었다면, 이번에는 Webstorm을 설치해 줍시다.<br>\n<a href=\"https://copycoding.tistory.com/73\">https://copycoding.tistory.com/73</a> </p>\n<p>위 링크에서 설치중, License Activation에서 우린 학생 라이센스를 획득 했기 때문에 Evaluate for free가 아닌 Activate를 체크하고 아까 라이센스를 획득한 jetbrains 이메일과 비밀번호를 입력해주시면 됩니다.</p>\n<h4>Visual Studio Code 설치하기</h4>\n<p><a href=\"https://league-cat.tistory.com/7\">https://league-cat.tistory.com/7</a></p>\n<p>위 링크를 따라 설치하시면 됩니다.</p>\n<h3>(3) Hello Node.js 출력하기</h3>\n<p>Webstorm 혹은 VS Code를 실행해 줍시다.\n파일명이 hello인 javascript 파일(.js)을 생성해 줍시다.<br>\n다음과 같은 소스코드를 입력해 봅시다.  </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello Node.js!\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>webstorm의 경우 Alt+Shift+F10을 누르면 실행이 되고,<br>\nvscode의 경우 Ctrl+F5를 누르면 실행이 됩니다.<br>\n콘솔창에 Hello Node.js! 가 출력이 된 것을 확인 할 수 있습니다.  </p>\n<h3>(4) Assignment</h3>\n<p>자신의 이름을 콘솔창에 출력하는 프로그램 hello.js를 작성하여 자신의 github repository에 제출해 주세요.<br>\n출력예시:  </p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">Hello 주원!</code></pre></div>","frontmatter":{"date":"2020-07-07","title":"[Node.js] 1. Introduction","tags":["node.js"]}}},"pageContext":{"title":"[Node.js] 1. Introduction"}}}